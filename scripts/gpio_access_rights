#! /bin/bash
### BEGIN INIT INFO
# Provides:          gpio_access_rights
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Sets GPIO access right
# Description:       Sets GPIO access right for use wiht apache and php
### END INIT INFO

####################
# loopback configuration
GPIO_NR="17 22 23 24"
####################

# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/sbin:/usr/sbin:/bin:/usr/bin
NAME="gpio_access_rights"
DESC="Sets GPIO access right"
SCRIPTNAME=/etc/init.d/gpio_access_rights

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.2-14) to ensure that this file is present
# and status_of_proc is working.
. /lib/lsb/init-functions


#
# Function that starts the daemon/service
#
do_start()
{
	# Return
	#   0 if daemon has been started
	#   1 if daemon was already running
	#   2 if daemon could not be started

        for pin in $GPIO_NR; do
            /usr/local/bin/gpio export $pin out
            if [ $? -ne 0 ]; then
                    echo "Could not set GPIO output for GPIO$pin"
                    return 2
            fi
            chown -R www-data:pi /sys/devices/virtual/gpio/gpio$pin
            if [ $? -ne 0 ]; then
                    echo "Could not change GPIO Owner for GPIO$pin"
                    return 2
            fi
            chmod -R g+w /sys/devices/virtual/gpio/gpio$pin
            if [ $? -ne 0 ]; then
                    echo "Could not change GPIO right for GPIO$pin"
                    return 2
            fi
        done
	
	# successfully started
	return 0
}

#
# Function that stops the daemon/service
#
do_stop()
{
	# Return
	#   0 if daemon has been stopped
	#   1 if daemon was already stopped
	#   2 if daemon could not be stopped
	#   other if a failure occurred

	echo "There is nothing to be stoped"

	return 0
}


case "$1" in
  start)
	[ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
	do_start
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  stop)
	[ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
	do_stop
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  restart|force-reload)
	#
	# If the "reload" option is implemented then remove the
	# 'force-reload' alias
	#
	log_daemon_msg "Restarting $DESC" "$NAME"
	do_stop
	case "$?" in
	  0|1)
		do_start
		case "$?" in
			0) log_end_msg 0 ;;
			1) log_end_msg 1 ;; # Old process is still running
			*) log_end_msg 1 ;; # Failed to start
		esac
		;;
	  *)
		# Failed to stop
		log_end_msg 1
		;;
	esac
	;;
  *)
	#echo "Usage: $SCRIPTNAME {start|stop|restart}" >&2
	echo "Usage: $SCRIPTNAME {start|stop|restart}" >&2
	exit 3
	;;
esac

:
